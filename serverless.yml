service: ${file(./config/stages/common.yml):service}

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-prune-plugin
  - serverless-domain-manager
  - serverless-api-gateway-throttling
  - serverless-plugin-lambda-insights
  - serverless-plugin-aws-alerts
  - serverless-associate-waf

custom:
  defaultStage: dev
  prjPrefix: ${self:service}-${self:provider.stage}
  stageConfigFileName: ./config/stages/${self:provider.stage}.yml
  awsAccontId: ${file(./config/stages/common.yml):awsAccountId}
  cognitoRegion: ${file(${self:custom.stageConfigFileName}):cognitoRegion}
  cognitoUserpoolId: ${file(${self:custom.stageConfigFileName}):cognitoUserpoolId}
  wsgi:
    app: app/handler.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  prune:
    automatic: true
    number: 5
  customDomain:
    domainName: ${file(${self:custom.stageConfigFileName}):domainName}
    stage: ${self:provider.stage}
    basePath: 'api'
    certificateName: ${self:custom.customDomain.domainName}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
  apiGatewayThrottling:
    maxRequestsPerSecond: 100
    maxConcurrentRequests: 100
  lambdaInsights:
    defaultLambdaInsights: true #enables Lambda Insights for all functions
  alerts:
    stages:
      - dev
      - prd
    topics:
      alarm:
        topic: ${self:custom.prjPrefix}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${file(${self:custom.stageConfigFileName}):notificationEmail}
      #ok:
      #  topic: ${self:custom.prjPrefix}-alerts-ok
    alarms:
      - functionErrors
      - functionThrottles
    definitions:
      functionErrors:
        period: 60
  associateWaf:
    name: web-api-acl # If need to use WAF, create WebACL named "web-api-acl". If not create, ignore this.
    version: V2 #(optional) Regional | V2

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${file(./config/stages/common.yml):defaultRegion}
  endpointType: REGIONAL
  #profile: your-aws-profile-name
  iam:
    role:
      statements: ${file(./config/iam-role-statements.yml)}
  logs:
    restApi:
      accessLogging: ${file(${self:custom.stageConfigFileName}):logsRestApiAccessLogging}
      executionLogging: ${file(${self:custom.stageConfigFileName}):logsRestApiExecutionLogging}
      level: ${file(${self:custom.stageConfigFileName}):logsRestApiLevel}
      fullExecutionData: ${file(${self:custom.stageConfigFileName}):logsRestApiFullExecutionData}
  logRetentionInDays: 14
  environment:
    PRJ_PREFIX: ${self:custom.prjPrefix}
    APP_ROOT: /${self:custom.customDomain.basePath}
    CORS_ACCEPT_ORIGINS: ${file(${self:custom.stageConfigFileName}):corsAcceptOrigins}
    ACCEPT_SERVICE_IDS: ${file(${self:custom.stageConfigFileName}):acceptServiceIds}
    ACCEPT_TYPES: ${file(${self:custom.stageConfigFileName}):acceptTypes}
    BACKUP_VOTE_LOG_THRESHOLD_DAYS_OLDER_THAN : ${file(${self:custom.stageConfigFileName}):backupVoteLogThresholdDaysOlderThan}
    BACKUP_VOTE_LOG_COUNT_FOR_ALL: ${file(${self:custom.stageConfigFileName}):backupVoteLogCountForAll}
    BACKUP_VOTE_LOG_COUNT_FOR_EACH_SERVICE: ${file(${self:custom.stageConfigFileName}):backupVoteLogCountForEachService}
    SES_REGION: ${file(./config/stages/common.yml):sesRegion}
    COGNITO_REGION: ${file(${self:custom.stageConfigFileName}):cognitoRegion}
    COGNITO_USERPOOL_ID: ${self:custom.cognitoUserpoolId}
    COGNITO_APP_CLIENT_ID: ${file(${self:custom.stageConfigFileName}):cognitoAppClientId}
    COGNITO_CHECK_TOKEN_EXPIRATION: ${file(${self:custom.stageConfigFileName}):cognitoCheckTokenExpiration}
    COGNITO_JWT_HEADER_NAME: ${file(./config/stages/common.yml):cognitoJwtHeaderName}
    COGNITO_JWT_HEADER_PREFIX: ${file(./config/stages/common.yml):cognitoJwtHeaderPrefix}
    COMMENT_DEFAULT_PUBLISH_STATUS: ${file(${self:custom.stageConfigFileName}):commentDefaultPublishStatus}

package:
  exclude:
    - node_modules/**
    - config/stages-sample/**
    - config-bkup_*
    - LICENSE
    - README.md
    - tags
    - .venv/**
    - __pycache__
    - package-lock.json
    - .babelrc
    - .browserslistrc
    - .dynamodb/**
    - .eslintrc.js
    - .git/**
    - .gitignore
    - .github/**
    - .prettierrc.json
    - src/**
    - public/**
    - webpackConfigs/**
    - develop/**
    - terraform/**

functions:
  app:
    handler: wsgi_handler.handler
    memorySize: ${file(${self:custom.stageConfigFileName}):appMemorySize}
    events:
      - http: ANY /
      - http: ANY /{proxy+}
    provisionedConcurrency: 2
  #backupVoteLog:
  #  handler: app/backup_vote_log.main
  #  memorySize: ${file(${self:custom.stageConfigFileName}):backupVoteLogMemorySize}
  #  events:
  #    - schedule: ${file(${self:custom.stageConfigFileName}):backupVoteLogEventSchedule}

resources:
  Resources:
    ServiceDynamoDBTable: ${file(./config/dynamodb/service.yml)}
    SiteConfigDynamoDBTable: ${file(./config/dynamodb/site-config.yml)}
    VoteLogDynamoDBTable: ${file(./config/dynamodb/vote-log.yml)}
    VoteCountDynamoDBTable: ${file(./config/dynamodb/vote-count.yml)}
    ContactDynamoDBTable: ${file(./config/dynamodb/contact.yml)}
    CategoryDynamoDBTable: ${file(./config/dynamodb/category.yml)}
    PostDynamoDBTable: ${file(./config/dynamodb/post.yml)}
    CommentDynamoDBTable: ${file(./config/dynamodb/comment.yml)}
    CommentCountDynamoDBTable: ${file(./config/dynamodb/comment-count.yml)}
    TagDynamoDBTable: ${file(./config/dynamodb/tag.yml)}
    PostTagDynamoDBTable: ${file(./config/dynamodb/post-tag.yml)}
